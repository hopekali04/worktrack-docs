{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"API/","title":"\ud83d\udd0c API Documentation","text":""},{"location":"API/#overview","title":"Overview","text":"<p>WorkTrack uses Firebase Firestore as its database with a client-side SDK. There are no custom REST or GraphQL endpoints. All data operations happen through Firebase's real-time database API, with React hooks providing a clean abstraction layer.</p>"},{"location":"API/#data-models","title":"Data Models","text":""},{"location":"API/#core-enums","title":"Core Enums","text":""},{"location":"API/#workoutcategory","title":"WorkoutCategory","text":"<pre><code>enum WorkoutCategory {\n  UPPER = \"upper\",       // Upper body exercises\n  LOWER = \"lower\",       // Lower body exercises\n  FULL_BODY = \"full\",    // Full body compound movements\n  CARDIO = \"cardio\",     // Cardiovascular exercises\n  CORE = \"core\",         // Core and abs exercises\n}\n</code></pre>"},{"location":"API/#equipmenttype","title":"EquipmentType","text":"<pre><code>enum EquipmentType {\n  BODYWEIGHT = \"bodyweight\",           // Push-ups, pull-ups, etc.\n  BARBELL = \"barbell\",                 // Barbell exercises\n  DUMBBELL = \"dumbbell\",               // Dumbbell exercises\n  MACHINE = \"machine\",                 // Weight machines\n  CABLE = \"cable\",                     // Cable machines\n  CARDIO_EQUIPMENT = \"cardio_equipment\", // Treadmill, bike, etc.\n  OTHER = \"other\",                     // Resistance bands, kettlebells\n}\n</code></pre>"},{"location":"API/#musclegroup","title":"MuscleGroup","text":"<pre><code>enum MuscleGroup {\n  CHEST = \"chest\",\n  BACK = \"back\",\n  SHOULDERS = \"shoulders\",\n  BICEPS = \"biceps\",\n  TRICEPS = \"triceps\",\n  FOREARMS = \"forearms\",\n  ABS = \"abs\",\n  OBLIQUES = \"obliques\",\n  QUADS = \"quads\",\n  HAMSTRINGS = \"hamstrings\",\n  GLUTES = \"glutes\",\n  CALVES = \"calves\",\n  CARDIO = \"cardio\",\n}\n</code></pre>"},{"location":"API/#activitytag","title":"ActivityTag","text":"<pre><code>enum ActivityTag {\n  STRENGTH = \"strength\",     // Traditional strength training\n  RUNNING = \"running\",       // Running activities\n  SPRINTS = \"sprints\",       // Sprint training\n  CYCLING = \"cycling\",       // Cycling activities\n  SWIMMING = \"swimming\",     // Swimming activities\n  HIIT = \"hiit\",            // High-intensity interval training\n  STRETCHING = \"stretching\", // Flexibility and mobility\n}\n</code></pre>"},{"location":"API/#unitsystem","title":"UnitSystem","text":"<pre><code>enum UnitSystem {\n  METRIC = \"metric\",     // kg, km\n  IMPERIAL = \"imperial\", // lbs, miles\n}\n</code></pre>"},{"location":"API/#user-profile","title":"User Profile","text":"<p>Collection: <code>users/{userId}</code></p> <pre><code>interface UserProfile {\n  uid: string;                    // Firebase Auth UID\n  email: string;                  // User email address\n  displayName: string | null;     // User's display name\n  photoURL: string | null;        // Profile photo URL\n  createdAt: Timestamp;           // Account creation date\n  updatedAt: Timestamp;           // Last profile update\n  settings: UserSettings;         // User preferences\n  onboardingCompleted: boolean;   // Whether user completed setup\n}\n\ninterface UserSettings {\n  unitSystem: UnitSystem;         // Metric or imperial\n  darkMode: boolean;              // Dark mode preference\n  defaultRestTime: number;        // Default rest time in seconds\n  notificationsEnabled: boolean;  // Push notification preference\n}\n</code></pre> <p>Security Rules: <pre><code>// Users can only read/write their own profile\nallow read, write: if request.auth.uid == userId;\n</code></pre></p>"},{"location":"API/#workout-type-exercise-definition","title":"Workout Type (Exercise Definition)","text":"<p>Collection: <code>workoutTypes/{typeId}</code></p> <pre><code>interface WorkoutType {\n  id: string;                     // Firestore document ID\n  userId: string;                 // Owner of this workout type\n  name: string;                   // Exercise name (e.g., \"Bench Press\")\n  category: WorkoutCategory;      // Exercise category\n  equipment: EquipmentType;       // Required equipment\n  muscleGroups: MuscleGroup[];    // Target muscle groups\n  activityTags: ActivityTag[];    // Activity classifications\n  isDefault: boolean;             // Whether this is a system default\n  createdAt: Timestamp;           // Creation timestamp\n  updatedAt: Timestamp;           // Last update timestamp\n}\n</code></pre> <p>Form Input Type (for creating new workout types): <pre><code>interface WorkoutTypeInput {\n  name: string;\n  category: WorkoutCategory;\n  equipment: EquipmentType;\n  muscleGroups: MuscleGroup[];\n  activityTags: ActivityTag[];\n}\n</code></pre></p> <p>Security Rules: <pre><code>// Users can read/write their own workout types\nallow read, write: if request.auth.uid == resource.data.userId;\nallow create: if request.auth.uid == request.resource.data.userId;\n</code></pre></p> <p>Indexes: - <code>userId</code> (ascending) - for querying user's workout types - <code>userId, category</code> (composite) - for filtering by category - <code>userId, muscleGroups</code> (array-contains) - for filtering by muscle group</p>"},{"location":"API/#workout-session","title":"Workout Session","text":"<p>Collection: <code>workoutSessions/{sessionId}</code></p> <pre><code>interface WorkoutSession {\n  id: string;                     // Firestore document ID\n  userId: string;                 // Owner of this session\n  date: Timestamp;                // When workout occurred\n  duration: number;               // Duration in minutes\n  exercises: ExerciseEntry[];     // List of exercises performed\n  notes?: string;                 // Optional session notes\n  createdAt: Timestamp;           // When logged in system\n  updatedAt: Timestamp;           // Last update\n}\n\ninterface ExerciseEntry {\n  workoutTypeId: string;          // Reference to WorkoutType\n  workoutTypeName: string;        // Cached name for display\n  sets: SetEntry[];               // List of sets performed\n  notes?: string;                 // Exercise-specific notes\n}\n\ninterface SetEntry {\n  reps?: number;                  // Number of repetitions\n  weight?: number;                // Weight used (kg or lbs)\n  rpe?: number;                   // Rate of Perceived Exertion (1-10)\n  distance?: number;              // Distance (km or miles) for cardio\n  time?: number;                  // Time (seconds) for cardio/timed exercises\n}\n</code></pre> <p>Form Input Types (for creating new sessions): <pre><code>interface WorkoutSessionInput {\n  date: Date;\n  duration: number;\n  notes?: string;\n  exercises: ExerciseEntryInput[];\n}\n\ninterface ExerciseEntryInput {\n  workoutTypeId: string;\n  sets: SetEntryInput[];\n  notes?: string;\n}\n\ninterface SetEntryInput {\n  reps?: number;\n  weight?: number;\n  rpe?: number;\n  distance?: number;\n  time?: number;\n}\n</code></pre></p> <p>Security Rules: <pre><code>// Users can read/write their own workout sessions\nallow read, write: if request.auth.uid == resource.data.userId;\nallow create: if request.auth.uid == request.resource.data.userId;\n</code></pre></p> <p>Indexes: - <code>userId, date</code> (descending) - for chronological listing - <code>userId, createdAt</code> (descending) - for recent sessions</p>"},{"location":"API/#personal-record-future","title":"Personal Record (Future)","text":"<p>Collection: <code>personalRecords/{recordId}</code></p> <pre><code>interface PersonalRecord {\n  userId: string;                 // Owner of this record\n  workoutTypeId: string;          // Which exercise\n  workoutTypeName: string;        // Cached name\n  metric: \"weight\" | \"reps\" | \"volume\" | \"distance\" | \"time\";\n  value: number;                  // The record value\n  sessionId: string;              // Which session achieved this\n  date: Timestamp;                // When achieved\n  createdAt: Timestamp;           // When recorded in system\n}\n</code></pre>"},{"location":"API/#goal-future","title":"Goal (Future)","text":"<p>Collection: <code>goals/{goalId}</code></p> <pre><code>interface Goal {\n  id: string;\n  userId: string;\n  workoutTypeId?: string;         // Optional: specific exercise goal\n  targetMetric: \"weight\" | \"reps\" | \"volume\" | \"distance\" | \"time\" | \"frequency\";\n  targetValue: number;            // Goal target\n  currentValue: number;           // Current progress\n  deadline?: Timestamp;           // Optional deadline\n  completed: boolean;             // Whether goal is achieved\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n</code></pre>"},{"location":"API/#custom-hooks","title":"Custom Hooks","text":""},{"location":"API/#useworkouttypes","title":"useWorkoutTypes","text":"<p>Fetches and manages workout types for the current user.</p> <pre><code>import { useWorkoutTypes } from '@/lib/hooks/useWorkoutTypes';\n\nfunction MyComponent() {\n  const { \n    data: workoutTypes,     // WorkoutType[]\n    error,                  // Error | undefined\n    isLoading,             // boolean\n    mutate                 // Function to refresh data\n  } = useWorkoutTypes();\n\n  // Use workoutTypes...\n}\n</code></pre> <p>Features: - Automatically scoped to current user - Real-time updates via Firebase listener - Cached with SWR - Error handling built-in</p> <p>Implementation: <pre><code>export function useWorkoutTypes() {\n  const { user } = useAuth();\n\n  const { data, error, isLoading, mutate } = useSWR(\n    user ? ['workoutTypes', user.uid] : null,\n    async () =&gt; {\n      const q = query(\n        collection(db, 'workoutTypes'),\n        where('userId', '==', user.uid),\n        orderBy('name')\n      );\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc =&gt; ({\n        id: doc.id,\n        ...doc.data()\n      })) as WorkoutType[];\n    }\n  );\n\n  return { data, error, isLoading, mutate };\n}\n</code></pre></p>"},{"location":"API/#usesessions","title":"useSessions","text":"<p>Fetches workout sessions with optional filtering.</p> <pre><code>import { useSessions } from '@/lib/hooks/useSessions';\n\nfunction MyComponent() {\n  const { \n    data: sessions,         // WorkoutSession[]\n    error,                  // Error | undefined\n    isLoading,             // boolean\n    mutate                 // Function to refresh data\n  } = useSessions({\n    startDate: new Date('2024-01-01'),\n    endDate: new Date('2024-12-31'),\n    workoutTypeId: 'bench-press-id', // optional filter\n  });\n\n  // Use sessions...\n}\n</code></pre> <p>Parameters: <pre><code>interface UseSessionsParams {\n  startDate?: Date;              // Filter by start date\n  endDate?: Date;                // Filter by end date\n  workoutTypeId?: string;        // Filter by specific exercise\n  limit?: number;                // Limit number of results\n}\n</code></pre></p> <p>Features: - Real-time updates - Date range filtering - Exercise filtering - Pagination support - Automatic caching</p>"},{"location":"API/#firebase-operations","title":"Firebase Operations","text":""},{"location":"API/#creating-data","title":"Creating Data","text":"<p>Create Workout Type: <pre><code>import { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { db } from '@/lib/firebase/config';\n\nasync function createWorkoutType(data: WorkoutTypeInput) {\n  const { user } = useAuth();\n\n  const docRef = await addDoc(collection(db, 'workoutTypes'), {\n    ...data,\n    userId: user.uid,\n    isDefault: false,\n    createdAt: serverTimestamp(),\n    updatedAt: serverTimestamp(),\n  });\n\n  return docRef.id;\n}\n</code></pre></p> <p>Create Workout Session: <pre><code>async function createWorkoutSession(data: WorkoutSessionInput) {\n  const { user } = useAuth();\n\n  const docRef = await addDoc(collection(db, 'workoutSessions'), {\n    ...data,\n    userId: user.uid,\n    date: Timestamp.fromDate(data.date),\n    createdAt: serverTimestamp(),\n    updatedAt: serverTimestamp(),\n  });\n\n  return docRef.id;\n}\n</code></pre></p>"},{"location":"API/#reading-data","title":"Reading Data","text":"<p>Get Single Document: <pre><code>import { doc, getDoc } from 'firebase/firestore';\n\nasync function getWorkoutSession(sessionId: string) {\n  const docRef = doc(db, 'workoutSessions', sessionId);\n  const docSnap = await getDoc(docRef);\n\n  if (!docSnap.exists()) {\n    throw new Error('Session not found');\n  }\n\n  return { id: docSnap.id, ...docSnap.data() } as WorkoutSession;\n}\n</code></pre></p> <p>Query Collection: <pre><code>import { collection, query, where, orderBy, getDocs } from 'firebase/firestore';\n\nasync function getUserSessions(userId: string) {\n  const q = query(\n    collection(db, 'workoutSessions'),\n    where('userId', '==', userId),\n    orderBy('date', 'desc')\n  );\n\n  const snapshot = await getDocs(q);\n  return snapshot.docs.map(doc =&gt; ({\n    id: doc.id,\n    ...doc.data()\n  })) as WorkoutSession[];\n}\n</code></pre></p>"},{"location":"API/#updating-data","title":"Updating Data","text":"<p>Update Workout Type: <pre><code>import { doc, updateDoc, serverTimestamp } from 'firebase/firestore';\n\nasync function updateWorkoutType(id: string, updates: Partial&lt;WorkoutTypeInput&gt;) {\n  const docRef = doc(db, 'workoutTypes', id);\n\n  await updateDoc(docRef, {\n    ...updates,\n    updatedAt: serverTimestamp(),\n  });\n}\n</code></pre></p> <p>Update Workout Session: <pre><code>async function updateWorkoutSession(id: string, updates: Partial&lt;WorkoutSessionInput&gt;) {\n  const docRef = doc(db, 'workoutSessions', id);\n\n  await updateDoc(docRef, {\n    ...updates,\n    updatedAt: serverTimestamp(),\n  });\n}\n</code></pre></p>"},{"location":"API/#deleting-data","title":"Deleting Data","text":"<p>Delete Workout Type: <pre><code>import { doc, deleteDoc } from 'firebase/firestore';\n\nasync function deleteWorkoutType(id: string) {\n  const docRef = doc(db, 'workoutTypes', id);\n  await deleteDoc(docRef);\n}\n</code></pre></p> <p>Delete Workout Session: <pre><code>async function deleteWorkoutSession(id: string) {\n  const docRef = doc(db, 'workoutSessions', id);\n  await deleteDoc(docRef);\n}\n</code></pre></p>"},{"location":"API/#real-time-listeners","title":"Real-Time Listeners","text":"<p>Listen to Workout Types: <pre><code>import { collection, query, where, onSnapshot } from 'firebase/firestore';\n\nfunction subscribeToWorkoutTypes(userId: string, callback: (types: WorkoutType[]) =&gt; void) {\n  const q = query(\n    collection(db, 'workoutTypes'),\n    where('userId', '==', userId)\n  );\n\n  const unsubscribe = onSnapshot(q, (snapshot) =&gt; {\n    const types = snapshot.docs.map(doc =&gt; ({\n      id: doc.id,\n      ...doc.data()\n    })) as WorkoutType[];\n\n    callback(types);\n  });\n\n  // Return unsubscribe function to clean up\n  return unsubscribe;\n}\n</code></pre></p>"},{"location":"API/#validation","title":"Validation","text":""},{"location":"API/#zod-schemas","title":"Zod Schemas","text":"<p>All form inputs are validated with Zod schemas before submission.</p> <p>Workout Type Schema: <pre><code>import { z } from 'zod';\n\nexport const workoutTypeSchema = z.object({\n  name: z.string()\n    .min(1, 'Name is required')\n    .max(100, 'Name must be less than 100 characters'),\n  category: z.nativeEnum(WorkoutCategory),\n  equipment: z.nativeEnum(EquipmentType),\n  muscleGroups: z.array(z.nativeEnum(MuscleGroup))\n    .min(1, 'Select at least one muscle group'),\n  activityTags: z.array(z.nativeEnum(ActivityTag)),\n});\n\nexport type WorkoutTypeFormData = z.infer&lt;typeof workoutTypeSchema&gt;;\n</code></pre></p> <p>Workout Session Schema: <pre><code>export const setEntrySchema = z.object({\n  reps: z.number().int().min(1).optional(),\n  weight: z.number().min(0).optional(),\n  rpe: z.number().int().min(1).max(10).optional(),\n  distance: z.number().min(0).optional(),\n  time: z.number().int().min(0).optional(),\n});\n\nexport const exerciseEntrySchema = z.object({\n  workoutTypeId: z.string().min(1, 'Exercise is required'),\n  sets: z.array(setEntrySchema).min(1, 'Add at least one set'),\n  notes: z.string().optional(),\n});\n\nexport const workoutSessionSchema = z.object({\n  date: z.date(),\n  duration: z.number().int().min(1, 'Duration must be at least 1 minute'),\n  exercises: z.array(exerciseEntrySchema).min(1, 'Add at least one exercise'),\n  notes: z.string().optional(),\n});\n\nexport type WorkoutSessionFormData = z.infer&lt;typeof workoutSessionSchema&gt;;\n</code></pre></p>"},{"location":"API/#error-handling","title":"Error Handling","text":""},{"location":"API/#firebase-errors","title":"Firebase Errors","text":"<p>Common Firebase errors and how to handle them:</p> <pre><code>try {\n  await createWorkoutSession(data);\n} catch (error) {\n  if (error.code === 'permission-denied') {\n    // User doesn't have permission\n    toast.error('You do not have permission to perform this action');\n  } else if (error.code === 'not-found') {\n    // Document doesn't exist\n    toast.error('Workout session not found');\n  } else if (error.code === 'unauthenticated') {\n    // User is not authenticated\n    router.push('/login');\n  } else {\n    // Generic error\n    toast.error('An error occurred. Please try again.');\n    console.error(error);\n  }\n}\n</code></pre>"},{"location":"API/#form-validation-errors","title":"Form Validation Errors","text":"<p>React Hook Form automatically displays Zod validation errors:</p> <pre><code>&lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n  &lt;input {...register('name')} /&gt;\n  {errors.name &amp;&amp; (\n    &lt;p className=\"text-red-500 text-sm\"&gt;{errors.name.message}&lt;/p&gt;\n  )}\n&lt;/form&gt;\n</code></pre>"},{"location":"API/#optimistic-updates","title":"Optimistic Updates","text":"<p>For better UX, use SWR's optimistic updates:</p> <pre><code>import { mutate } from 'swr';\n\nasync function deleteWorkoutType(id: string) {\n  // Optimistically update the UI\n  mutate(['workoutTypes', user.uid], \n    (current) =&gt; current?.filter(type =&gt; type.id !== id),\n    false // Don't revalidate yet\n  );\n\n  try {\n    // Perform actual deletion\n    await deleteDoc(doc(db, 'workoutTypes', id));\n\n    // Revalidate to ensure consistency\n    mutate(['workoutTypes', user.uid]);\n  } catch (error) {\n    // Rollback on error\n    mutate(['workoutTypes', user.uid]);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"API/#data-aggregation","title":"Data Aggregation","text":""},{"location":"API/#calculate-total-volume","title":"Calculate Total Volume","text":"<pre><code>function calculateTotalVolume(session: WorkoutSession): number {\n  return session.exercises.reduce((total, exercise) =&gt; {\n    const exerciseVolume = exercise.sets.reduce((sum, set) =&gt; {\n      if (set.weight &amp;&amp; set.reps) {\n        return sum + (set.weight * set.reps);\n      }\n      return sum;\n    }, 0);\n    return total + exerciseVolume;\n  }, 0);\n}\n</code></pre>"},{"location":"API/#calculate-personal-records","title":"Calculate Personal Records","text":"<pre><code>function calculatePRs(sessions: WorkoutSession[], workoutTypeId: string) {\n  let maxWeight = 0;\n  let maxReps = 0;\n  let maxVolume = 0;\n\n  sessions.forEach(session =&gt; {\n    session.exercises\n      .filter(ex =&gt; ex.workoutTypeId === workoutTypeId)\n      .forEach(exercise =&gt; {\n        exercise.sets.forEach(set =&gt; {\n          if (set.weight &amp;&amp; set.weight &gt; maxWeight) {\n            maxWeight = set.weight;\n          }\n          if (set.reps &amp;&amp; set.reps &gt; maxReps) {\n            maxReps = set.reps;\n          }\n          if (set.weight &amp;&amp; set.reps) {\n            const volume = set.weight * set.reps;\n            if (volume &gt; maxVolume) {\n              maxVolume = volume;\n            }\n          }\n        });\n      });\n  });\n\n  return { maxWeight, maxReps, maxVolume };\n}\n</code></pre>"},{"location":"API/#rate-limiting","title":"Rate Limiting","text":"<p>Firebase has built-in rate limiting, but for additional protection:</p> <ol> <li>Client-side debouncing: Prevent rapid-fire requests</li> <li>SWR deduplication: Automatic request deduplication</li> <li>Firebase App Check: Verify requests come from legitimate app</li> </ol>"},{"location":"API/#best-practices","title":"Best Practices","text":""},{"location":"API/#1-always-check-authentication","title":"1. Always Check Authentication","text":"<pre><code>const { user } = useAuth();\n\nif (!user) {\n  return &lt;div&gt;Please log in&lt;/div&gt;;\n}\n</code></pre>"},{"location":"API/#2-use-typescript-types","title":"2. Use TypeScript Types","text":"<pre><code>// Good: Type-safe\nconst session: WorkoutSession = await getSession(id);\n\n// Bad: No type safety\nconst session = await getSession(id);\n</code></pre>"},{"location":"API/#3-handle-loading-states","title":"3. Handle Loading States","text":"<pre><code>const { data, isLoading, error } = useWorkoutTypes();\n\nif (isLoading) return &lt;Skeleton /&gt;;\nif (error) return &lt;Error /&gt;;\nif (!data) return null;\n\nreturn &lt;List data={data} /&gt;;\n</code></pre>"},{"location":"API/#4-validate-user-input","title":"4. Validate User Input","text":"<pre><code>// Always validate with Zod before submitting\nconst result = workoutTypeSchema.safeParse(formData);\n\nif (!result.success) {\n  console.error(result.error);\n  return;\n}\n\nawait createWorkoutType(result.data);\n</code></pre>"},{"location":"API/#5-clean-up-listeners","title":"5. Clean Up Listeners","text":"<pre><code>useEffect(() =&gt; {\n  const unsubscribe = onSnapshot(query, callback);\n\n  // Clean up on unmount\n  return () =&gt; unsubscribe();\n}, []);\n</code></pre>"},{"location":"API/#future-api-enhancements","title":"Future API Enhancements","text":"<p>See ideas.md for planned features:</p> <ul> <li>REST API: Custom endpoints for complex operations</li> <li>GraphQL: Flexible data fetching with Apollo</li> <li>WebSockets: Real-time collaboration features</li> <li>Cloud Functions: Server-side data processing</li> <li>Analytics API: Advanced progress analytics</li> </ul> <p>This API documentation covers all current data models and operations in WorkTrack. For setup instructions, see SETUP.md.</p>"},{"location":"Architecture/","title":"\ud83c\udfd7\ufe0f Architecture Documentation","text":""},{"location":"Architecture/#system-overview","title":"System Overview","text":"<p>WorkTrack follows a modern, serverless architecture built on Next.js and Firebase. The application uses a client-side rendered approach with server-side routing, leveraging Firebase for authentication, real-time database operations, and security.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Client Layer                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502  \u2502   Next.js    \u2502  \u2502   React      \u2502  \u2502  TypeScript  \u2502          \u2502\n\u2502  \u2502  App Router  \u2502  \u2502  Components  \u2502  \u2502   + Zod      \u2502          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2195\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Firebase Services                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502  \u2502    Auth      \u2502  \u2502  Firestore   \u2502  \u2502   Storage    \u2502          \u2502\n\u2502  \u2502              \u2502  \u2502  (NoSQL DB)  \u2502  \u2502  (Planned)   \u2502          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"Architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"Architecture/#1-client-side-first","title":"1. Client-Side First","text":"<ul> <li>All rendering happens in the browser using React</li> <li>Next.js provides routing and build optimization</li> <li>API calls go directly to Firebase (no custom backend)</li> </ul>"},{"location":"Architecture/#2-type-safety","title":"2. Type Safety","text":"<ul> <li>Strict TypeScript throughout the codebase</li> <li>Zod schemas for runtime validation</li> <li>Type-safe Firebase operations with proper interfaces</li> </ul>"},{"location":"Architecture/#3-component-composition","title":"3. Component Composition","text":"<ul> <li>Small, reusable components with single responsibilities</li> <li>Headless UI for accessible primitives</li> <li>Clear separation between UI and business logic</li> </ul>"},{"location":"Architecture/#4-real-time-data","title":"4. Real-Time Data","text":"<ul> <li>Firebase listeners for live updates</li> <li>SWR for client-side caching and revalidation</li> <li>Optimistic updates for better UX</li> </ul>"},{"location":"Architecture/#5-security-by-default","title":"5. Security by Default","text":"<ul> <li>Firestore security rules enforce access control</li> <li>All data operations validated on the server</li> <li>User data completely isolated</li> </ul>"},{"location":"Architecture/#project-structure","title":"Project Structure","text":"<pre><code>worktrack/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/                    # Next.js App Router\n\u2502   \u2502   \u251c\u2500\u2500 (auth)/            # Authentication pages (login, signup)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 login/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 signup/\n\u2502   \u2502   \u251c\u2500\u2500 (dashboard)/       # Protected dashboard layout\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 layout.tsx     # Sidebar navigation wrapper\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 page.tsx       # Dashboard home\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 workouts/      # Manage workout types\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 log/           # Log and view workout sessions\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 progress/      # Charts and analytics\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 settings/      # User settings\n\u2502   \u2502   \u251c\u2500\u2500 layout.tsx         # Root layout with providers\n\u2502   \u2502   \u251c\u2500\u2500 providers.tsx      # Context providers wrapper\n\u2502   \u2502   \u2514\u2500\u2500 globals.css        # Global styles and Tailwind\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 components/            # Reusable React components\n\u2502   \u2502   \u251c\u2500\u2500 auth/             # Login, signup forms\n\u2502   \u2502   \u251c\u2500\u2500 layout/           # Sidebar, headers\n\u2502   \u2502   \u251c\u2500\u2500 ui/               # Buttons, inputs, modals\n\u2502   \u2502   \u251c\u2500\u2500 workouts/         # Workout type management\n\u2502   \u2502   \u2514\u2500\u2500 skeletons/        # Loading skeletons\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 contexts/             # React Context providers\n\u2502   \u2502   \u2514\u2500\u2500 AuthContext.tsx   # User authentication state\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 lib/                  # Utilities and helpers\n\u2502   \u2502   \u251c\u2500\u2500 firebase/         # Firebase configuration\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 config.ts     # Firebase app initialization\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 firestore.ts  # Firestore helper functions\n\u2502   \u2502   \u251c\u2500\u2500 hooks/            # Custom React hooks\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 useSessions.ts      # Workout session data\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 useWorkoutTypes.ts  # Workout type data\n\u2502   \u2502   \u251c\u2500\u2500 schemas/          # Zod validation schemas\n\u2502   \u2502   \u251c\u2500\u2500 types/            # TypeScript type definitions\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts      # All interfaces and enums\n\u2502   \u2502   \u2514\u2500\u2500 constants/        # App constants\n\u2502   \u2502       \u2514\u2500\u2500 defaultWorkouts.ts  # Pre-loaded exercises\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 constants/            # Deprecated, use lib/constants\n\u2502\n\u251c\u2500\u2500 firebase/                 # Firebase configuration files\n\u2502   \u2514\u2500\u2500 firestore.indexes.json\n\u2502\n\u251c\u2500\u2500 firestore.rules          # Firestore security rules\n\u251c\u2500\u2500 firebase.json            # Firebase project config\n\u2502\n\u251c\u2500\u2500 public/                  # Static assets\n\u2502   \u251c\u2500\u2500 next.svg\n\u2502   \u251c\u2500\u2500 vercel.svg\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 docs/                    # Documentation\n\u2502   \u251c\u2500\u2500 Index.md            # This overview\n\u2502   \u251c\u2500\u2500 Architecture.md     # System architecture\n\u2502   \u251c\u2500\u2500 API.md              # Data models and API\n\u2502   \u251c\u2500\u2500 SETUP.md            # Setup instructions\n\u2502   \u2514\u2500\u2500 ideas.md            # Future features\n\u2502\n\u251c\u2500\u2500 next.config.ts          # Next.js configuration\n\u251c\u2500\u2500 tailwind.config.js      # Tailwind CSS configuration\n\u251c\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u2514\u2500\u2500 package.json            # Dependencies and scripts\n</code></pre>"},{"location":"Architecture/#application-flow","title":"Application Flow","text":""},{"location":"Architecture/#authentication-flow","title":"Authentication Flow","text":"<pre><code>1. User visits app \u2192 Redirected to /login if not authenticated\n                  \u2193\n2. User enters credentials \u2192 Firebase Auth validates\n                  \u2193\n3. Firebase returns ID token \u2192 Stored in memory by Firebase SDK\n                  \u2193\n4. AuthContext updates \u2192 User object available to all components\n                  \u2193\n5. User redirected to dashboard \u2192 Protected routes now accessible\n</code></pre>"},{"location":"Architecture/#data-flow-for-workout-logging","title":"Data Flow for Workout Logging","text":"<pre><code>1. User navigates to /log/new\n                  \u2193\n2. Form loads workout types from useWorkoutTypes hook\n                  \u2193\n3. User fills in form \u2192 React Hook Form + Zod validate\n                  \u2193\n4. On submit \u2192 Data sent to Firestore with userId\n                  \u2193\n5. Firestore rules verify \u2192 User can only write their own data\n                  \u2193\n6. Success \u2192 SWR cache updated \u2192 UI reflects changes\n                  \u2193\n7. Real-time listener \u2192 Other tabs/devices get updates\n</code></pre>"},{"location":"Architecture/#core-components","title":"Core Components","text":""},{"location":"Architecture/#1-app-router-structure","title":"1. App Router Structure","text":"<p>Next.js App Router provides file-based routing with layouts:</p> <ul> <li>(auth) group: Unauthenticated pages (login, signup)</li> <li>(dashboard) group: Protected pages with sidebar layout</li> <li>Route groups (parentheses) don't affect URL structure</li> </ul>"},{"location":"Architecture/#2-authentication-layer","title":"2. Authentication Layer","text":"<p>AuthContext (<code>src/contexts/AuthContext.tsx</code>) - Wraps entire app in <code>providers.tsx</code> - Manages Firebase auth state - Provides <code>user</code> and <code>loading</code> to all components - Handles sign in, sign out, sign up operations</p> <p>Protected Routes - Dashboard layout checks auth state - Redirects to <code>/login</code> if not authenticated - Shows loading state during auth check</p>"},{"location":"Architecture/#3-data-management","title":"3. Data Management","text":"<p>Custom Hooks - <code>useWorkoutTypes()</code>: Fetches and caches workout types for current user - <code>useSessions()</code>: Fetches and caches workout sessions with filtering</p> <p>SWR Integration - Automatic caching and revalidation - Request deduplication - Optimistic updates - Error retry with exponential backoff</p> <p>Firebase Listeners - Real-time data sync across devices - Automatic updates when data changes - Memory-efficient subscription management</p>"},{"location":"Architecture/#4-ui-components","title":"4. UI Components","text":"<p>Layout Components (<code>src/components/layout/</code>) - <code>Sidebar.tsx</code>: Main navigation for dashboard - <code>Header.tsx</code>: Page headers with actions</p> <p>Form Components - Built with React Hook Form - Zod validation with clear error messages - Accessible form controls with labels</p> <p>Skeleton Loaders (<code>src/components/skeletons/</code>) - Shown during data loading - Match actual content structure - Animated with Tailwind</p>"},{"location":"Architecture/#data-architecture","title":"Data Architecture","text":""},{"location":"Architecture/#firestore-collections","title":"Firestore Collections","text":"<pre><code>users/{userId}\n  - uid: string\n  - email: string\n  - displayName: string | null\n  - photoURL: string | null\n  - settings: UserSettings\n  - createdAt: timestamp\n  - updatedAt: timestamp\n\nworkoutTypes/{typeId}\n  - userId: string (indexed)\n  - name: string\n  - category: WorkoutCategory\n  - equipment: EquipmentType\n  - muscleGroups: MuscleGroup[]\n  - activityTags: ActivityTag[]\n  - isDefault: boolean\n  - createdAt: timestamp\n  - updatedAt: timestamp\n\nworkoutSessions/{sessionId}\n  - userId: string (indexed)\n  - date: timestamp\n  - duration: number\n  - exercises: ExerciseEntry[]\n  - notes: string\n  - createdAt: timestamp\n  - updatedAt: timestamp\n</code></pre>"},{"location":"Architecture/#data-relationships","title":"Data Relationships","text":"<ul> <li>One-to-Many: User \u2192 WorkoutTypes (one user has many workout types)</li> <li>One-to-Many: User \u2192 WorkoutSessions (one user has many sessions)</li> <li>Reference: WorkoutSession.exercises[].workoutTypeId \u2192 WorkoutType.id</li> </ul>"},{"location":"Architecture/#security-rules","title":"Security Rules","text":"<p>All collections have user-based access control:</p> <pre><code>// Users can only read/write their own data\nallow read, write: if request.auth.uid == userId;\n\n// On create, userId must match authenticated user\nallow create: if request.auth.uid == request.resource.data.userId;\n</code></pre>"},{"location":"Architecture/#state-management","title":"State Management","text":""},{"location":"Architecture/#global-state-react-context","title":"Global State (React Context)","text":"<p>AuthContext - User authentication state - Loading state - Auth methods (signIn, signOut, signUp)</p> <p>Settings (stored in Firestore) - User preferences - Unit system (metric/imperial) - Dark mode preference - Default rest time</p>"},{"location":"Architecture/#local-state","title":"Local State","text":"<p>Component State (useState) - Form inputs - Modal visibility - UI toggles</p> <p>SWR Cache (automatic) - Fetched data from Firestore - Cached by unique key - Revalidated on focus, reconnect</p>"},{"location":"Architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"Architecture/#1-code-splitting","title":"1. Code Splitting","text":"<ul> <li>Next.js automatically splits routes</li> <li>Dynamic imports for heavy components</li> <li>Lazy loading for below-the-fold content</li> </ul>"},{"location":"Architecture/#2-image-optimization","title":"2. Image Optimization","text":"<ul> <li>Next.js Image component</li> <li>Automatic WebP conversion</li> <li>Responsive image loading</li> </ul>"},{"location":"Architecture/#3-caching-strategy","title":"3. Caching Strategy","text":"<ul> <li>SWR caches all Firestore queries</li> <li>Stale-while-revalidate pattern</li> <li>Optimistic updates for instant feedback</li> </ul>"},{"location":"Architecture/#4-bundle-size","title":"4. Bundle Size","text":"<ul> <li>Tree shaking removes unused code</li> <li>Minimal dependencies</li> <li>No heavy libraries</li> </ul>"},{"location":"Architecture/#5-database-optimization","title":"5. Database Optimization","text":"<ul> <li>Composite indexes for common queries</li> <li>Efficient query structure (user-scoped)</li> <li>Pagination for large datasets</li> </ul>"},{"location":"Architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"Architecture/#authentication","title":"Authentication","text":"<ul> <li>Firebase Auth handles all auth operations</li> <li>JWT tokens for API authentication</li> <li>Automatic token refresh</li> </ul>"},{"location":"Architecture/#authorization","title":"Authorization","text":"<ul> <li>Firestore security rules enforce access control</li> <li>User can only access their own data</li> <li>Server-side validation on all writes</li> </ul>"},{"location":"Architecture/#data-validation","title":"Data Validation","text":"<ul> <li>Client-side: Zod schemas validate before submission</li> <li>Server-side: Firestore rules validate structure</li> <li>Type safety: TypeScript catches errors at compile time</li> </ul>"},{"location":"Architecture/#xss-prevention","title":"XSS Prevention","text":"<ul> <li>React escapes all dynamic content</li> <li>No <code>dangerouslySetInnerHTML</code> usage</li> <li>Content Security Policy headers (Vercel)</li> </ul>"},{"location":"Architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"Architecture/#hosting","title":"Hosting","text":"<ul> <li>Vercel (recommended): Automatic deployments from Git</li> <li>Firebase Hosting (alternative): CDN with custom domain support</li> </ul>"},{"location":"Architecture/#environment-variables","title":"Environment Variables","text":"<ul> <li>Stored in Vercel/Firebase</li> <li>Firebase config public (API keys protected by domain restrictions)</li> <li>No secrets in client code</li> </ul>"},{"location":"Architecture/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ol> <li>Push to Git repository</li> <li>Vercel detects changes</li> <li>Runs <code>npm run build</code></li> <li>Deploys to preview URL (for PRs) or production (for main branch)</li> <li>Automatic rollback on errors</li> </ol>"},{"location":"Architecture/#monitoring","title":"Monitoring","text":"<ul> <li>Vercel Analytics for performance metrics</li> <li>Firebase Console for database usage</li> <li>Browser console for error tracking</li> </ul>"},{"location":"Architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"Architecture/#current-scale","title":"Current Scale","text":"<ul> <li>Supports hundreds of concurrent users</li> <li>Firestore handles up to 1M reads/day on free tier</li> <li>No backend server to maintain</li> </ul>"},{"location":"Architecture/#future-scaling","title":"Future Scaling","text":"<ul> <li>Firestore auto-scales to millions of operations</li> <li>Add Cloud Functions for heavy computations</li> <li>Use Firestore caching for frequently accessed data</li> <li>Implement pagination for large result sets</li> </ul>"},{"location":"Architecture/#testing-strategy","title":"Testing Strategy","text":""},{"location":"Architecture/#type-safety","title":"Type Safety","text":"<ul> <li>TypeScript strict mode catches errors at compile time</li> <li>Zod validates runtime data</li> <li>Firebase emulator for local testing</li> </ul>"},{"location":"Architecture/#manual-testing","title":"Manual Testing","text":"<ul> <li>Test authentication flows</li> <li>Test workout logging</li> <li>Test data visualization</li> <li>Cross-browser testing</li> <li>Mobile device testing</li> </ul>"},{"location":"Architecture/#future-automated-testing","title":"Future: Automated Testing","text":"<ul> <li>Vitest for unit tests</li> <li>Testing Library for component tests</li> <li>Playwright for E2E tests</li> </ul>"},{"location":"Architecture/#accessibility-architecture","title":"Accessibility Architecture","text":""},{"location":"Architecture/#standards-compliance","title":"Standards Compliance","text":"<ul> <li>WCAG 2.1 Level AA compliance</li> <li>Semantic HTML elements</li> <li>ARIA attributes where needed</li> </ul>"},{"location":"Architecture/#keyboard-navigation","title":"Keyboard Navigation","text":"<ul> <li>All interactive elements focusable</li> <li>Logical tab order</li> <li>Keyboard shortcuts for common actions</li> </ul>"},{"location":"Architecture/#screen-readers","title":"Screen Readers","text":"<ul> <li>Proper heading hierarchy</li> <li>Alt text for images</li> <li>ARIA labels for icon buttons</li> <li>Live regions for dynamic content</li> </ul>"},{"location":"Architecture/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>Sufficient color contrast (4.5:1 minimum)</li> <li>Dark mode support</li> <li>Resizable text (no pixel units for font sizes)</li> <li>No information conveyed by color alone</li> </ul>"},{"location":"Architecture/#technology-choices-rationale","title":"Technology Choices Rationale","text":""},{"location":"Architecture/#why-nextjs","title":"Why Next.js?","text":"<ul> <li>File-based routing is intuitive</li> <li>Excellent TypeScript support</li> <li>Built-in optimization (images, fonts, code splitting)</li> <li>Great developer experience</li> <li>Easy deployment to Vercel</li> </ul>"},{"location":"Architecture/#why-firebase","title":"Why Firebase?","text":"<ul> <li>No backend code to write or maintain</li> <li>Real-time synchronization out of the box</li> <li>Built-in authentication</li> <li>Generous free tier</li> <li>Scales automatically</li> </ul>"},{"location":"Architecture/#why-typescript","title":"Why TypeScript?","text":"<ul> <li>Catch errors at compile time</li> <li>Better IDE support and autocomplete</li> <li>Easier refactoring</li> <li>Self-documenting code</li> </ul>"},{"location":"Architecture/#why-tailwind-css","title":"Why Tailwind CSS?","text":"<ul> <li>Rapid development without context switching</li> <li>Small production bundle (unused styles purged)</li> <li>Consistent design system</li> <li>Mobile-first by default</li> </ul>"},{"location":"Architecture/#why-swr","title":"Why SWR?","text":"<ul> <li>Simple API for data fetching</li> <li>Automatic caching and revalidation</li> <li>Built by Vercel (great Next.js integration)</li> <li>Optimistic updates built-in</li> </ul>"},{"location":"Architecture/#future-architecture-enhancements","title":"Future Architecture Enhancements","text":"<p>See ideas.md for detailed feature proposals, including:</p> <ul> <li>Progressive Web App: Offline support with service workers</li> <li>Cloud Functions: Server-side processing for complex analytics</li> <li>Redis Cache: Faster data access for frequently queried data</li> <li>GraphQL API: Unified API layer for flexible data fetching</li> <li>Microservices: Separate services for recommendations, notifications</li> <li>Real-time Collaboration: Share workouts with friends or trainers</li> <li>Mobile App: React Native app sharing core business logic</li> </ul> <p>This architecture provides a solid foundation for a production-ready workout tracking application while remaining flexible for future enhancements.</p>"},{"location":"Index/","title":"\ud83d\udcaa WorkTrack Documentation","text":""},{"location":"Index/#overview","title":"Overview","text":"<p>WorkTrack is a comprehensive, production-ready workout tracking application that helps users log workouts, track progress, and visualize their fitness journey. Built with modern web technologies, it provides a seamless experience across all devices with real-time data synchronization and robust security.</p> <p>The application follows a mobile-first design philosophy with accessibility built in from the ground up. Every feature is designed to be intuitive, fast, and reliable, making it easy for users to focus on their fitness goals rather than fighting with technology.</p>"},{"location":"Index/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Index.md - Project overview and key features (this document)</li> <li>Architecture.md - System design and component structure</li> <li>API.md - Data models, hooks, and Firebase integration</li> <li>SETUP.md - Local development and deployment guide</li> <li>ideas.md - Future features and enhancements</li> </ul>"},{"location":"Index/#key-features","title":"Key Features","text":""},{"location":"Index/#authentication-user-management","title":"\ud83d\udd10 Authentication &amp; User Management","text":"<ul> <li>Email/Password Authentication: Secure user registration and login with Firebase Auth</li> <li>Google Sign-In: One-click authentication with Google accounts</li> <li>User Profiles: Personalized settings including unit system, dark mode, and rest time preferences</li> <li>Session Management: Persistent authentication with automatic token refresh</li> </ul>"},{"location":"Index/#workout-management","title":"\ud83d\udcaa Workout Management","text":"<ul> <li>Custom Workout Types: Create and manage unlimited exercise types</li> <li>Default Exercise Library: Pre-loaded with common exercises across all major muscle groups</li> <li>Categorization: Organize exercises by category (upper, lower, full body, cardio, core)</li> <li>Equipment Tracking: Tag exercises by equipment type (barbell, dumbbell, machine, etc.)</li> <li>Muscle Group Mapping: Track which muscles each exercise targets</li> </ul>"},{"location":"Index/#session-logging","title":"\ud83d\udcca Session Logging","text":"<ul> <li>Detailed Workout Sessions: Log date, duration, exercises, sets, reps, weight, and more</li> <li>RPE Tracking: Rate of Perceived Exertion for monitoring training intensity</li> <li>Distance &amp; Time Metrics: Support for cardio activities (running, cycling, swimming)</li> <li>Session Notes: Add contextual notes about how you felt, form cues, or observations</li> <li>Multi-Exercise Support: Log complex workouts with multiple exercises and varying sets</li> </ul>"},{"location":"Index/#progress-tracking-analytics","title":"\ud83d\udcc8 Progress Tracking &amp; Analytics","text":"<ul> <li>Interactive Charts: Visualize progress with responsive charts using Recharts</li> <li>Volume Tracking: Monitor total training volume over time</li> <li>Frequency Analysis: See workout consistency and patterns</li> <li>Personal Records: Automatic tracking of personal bests (coming soon)</li> <li>Trend Analysis: Identify improvements and plateaus across different time periods</li> </ul>"},{"location":"Index/#user-experience","title":"\ud83c\udfa8 User Experience","text":"<ul> <li>Mobile-First Design: Optimized for touch interfaces and small screens</li> <li>Dark Mode Support: Automatic theme detection with manual override</li> <li>Responsive Layout: Seamless experience from mobile phones to desktop monitors</li> <li>Accessible UI: WCAG 2.1 compliant with keyboard navigation and screen reader support</li> <li>Loading States: Skeleton screens and optimistic updates for smooth interactions</li> </ul>"},{"location":"Index/#security-privacy","title":"\ud83d\udd12 Security &amp; Privacy","text":"<ul> <li>Multi-User Isolation: Firestore security rules ensure complete data separation</li> <li>Server-Side Validation: All data validated on Firebase before storage</li> <li>Type-Safe Operations: Strict TypeScript prevents runtime errors</li> <li>Secure Authentication: Industry-standard auth with bcrypt password hashing</li> <li>HTTPS Only: All data transmitted over encrypted connections</li> </ul>"},{"location":"Index/#developer-experience","title":"\ud83d\udee0\ufe0f Developer Experience","text":"<ul> <li>TypeScript Strict Mode: Catch errors at compile time, not runtime</li> <li>Zod Validation: Runtime type checking with clear error messages</li> <li>React Hook Form: Performant forms with built-in validation</li> <li>SWR Caching: Automatic request deduplication and optimistic updates</li> <li>Hot Module Replacement: See changes instantly during development</li> </ul>"},{"location":"Index/#technologies-used","title":"Technologies Used","text":""},{"location":"Index/#frontend-framework","title":"Frontend Framework","text":"<ul> <li>Next.js 15.5.4 - React framework with App Router for file-based routing</li> <li>React 19.1.0 - Modern React with concurrent features</li> <li>TypeScript 5 - Static typing for improved code quality and developer experience</li> </ul>"},{"location":"Index/#styling-ui","title":"Styling &amp; UI","text":"<ul> <li>Tailwind CSS 3.4 - Utility-first CSS framework for rapid UI development</li> <li>Headless UI 2.2 - Unstyled, fully accessible UI components</li> <li>Heroicons 2.2 - Beautiful hand-crafted SVG icons</li> <li>PostCSS 8 - CSS transformation and optimization</li> </ul>"},{"location":"Index/#backend-database","title":"Backend &amp; Database","text":"<ul> <li>Firebase 12.3.0 - Backend-as-a-Service platform</li> <li>Firebase Authentication - User authentication and authorization</li> <li>Cloud Firestore - NoSQL document database with real-time sync</li> <li>Cloud Storage - File storage for user uploads (future use)</li> <li>Firestore Security Rules - Server-side data access control</li> </ul>"},{"location":"Index/#forms-validation","title":"Forms &amp; Validation","text":"<ul> <li>React Hook Form 7.63 - Performant, flexible form management</li> <li>Zod 4.1 - TypeScript-first schema validation</li> <li>hookform/resolvers 5.2 - Integration between React Hook Form and Zod</li> </ul>"},{"location":"Index/#data-fetching-state","title":"Data Fetching &amp; State","text":"<ul> <li>SWR 2.3 - React Hooks for data fetching with caching</li> <li>React Context API - Global state management for auth and settings</li> <li>Firebase Realtime Listeners - Live data synchronization</li> </ul>"},{"location":"Index/#data-visualization","title":"Data Visualization","text":"<ul> <li>Recharts 3.2 - Composable charting library built on D3</li> <li>date-fns 4.1 - Modern date utility library for formatting and manipulation</li> </ul>"},{"location":"Index/#development-tools","title":"Development Tools","text":"<ul> <li>ESLint 9 - Code linting with Next.js config</li> <li>Turbopack - Fast bundler for development and production builds</li> <li>Autoprefixer - Automatic vendor prefixing for CSS</li> </ul>"},{"location":"Index/#deployment-hosting","title":"Deployment &amp; Hosting","text":"<ul> <li>Vercel - Optimal Next.js hosting with automatic deployments</li> <li>Firebase Hosting - Alternative hosting option with CDN</li> </ul>"},{"location":"Index/#project-philosophy","title":"Project Philosophy","text":""},{"location":"Index/#mobile-first-design","title":"Mobile-First Design","text":"<p>Every feature is designed and tested on mobile devices first, then progressively enhanced for larger screens. This ensures the app works perfectly where users need it most - at the gym.</p>"},{"location":"Index/#type-safety","title":"Type Safety","text":"<p>Strict TypeScript combined with Zod validation provides type safety from the UI layer through to the database. This catches bugs before they reach production and makes refactoring safe.</p>"},{"location":"Index/#performance","title":"Performance","text":"<p>The app uses SWR for intelligent caching and request deduplication, skeleton screens for perceived performance, and code splitting to minimize initial load times.</p>"},{"location":"Index/#accessibility","title":"Accessibility","text":"<p>Built with semantic HTML, ARIA attributes, keyboard navigation, and screen reader support. All interactive elements are focusable and have appropriate labels.</p>"},{"location":"Index/#developer-experience_1","title":"Developer Experience","text":"<p>Clean code organization, comprehensive TypeScript types, and consistent naming conventions make the codebase easy to understand and maintain.</p>"},{"location":"Index/#getting-started","title":"Getting Started","text":"<p>New to WorkTrack development? Start with:</p> <ol> <li>SETUP.md - Get your development environment running</li> <li>Architecture.md - Understand the system design</li> <li>API.md - Learn about data models and hooks</li> <li>ideas.md - Explore future enhancements</li> </ol>"},{"location":"Index/#contributing","title":"Contributing","text":"<p>Contributions are welcome! This project follows industry best practices:</p> <ul> <li>Strict TypeScript with no <code>any</code> types</li> <li>Comprehensive Zod validation for all user inputs</li> <li>Responsive, accessible UI components</li> <li>Security-first Firebase rules</li> <li>Clean, maintainable code with clear separation of concerns</li> </ul>"},{"location":"Index/#license","title":"License","text":"<p>MIT License - feel free to use this project for personal or commercial purposes.</p> <p>Built with \u2764\ufe0f using Next.js, TypeScript, and Firebase</p>"},{"location":"SETUP/","title":"Setup Guide","text":""},{"location":"SETUP/#overview","title":"Overview","text":"<p>This guide will walk you through setting up WorkTrack for local development and deploying it to production. Follow these steps in order for a smooth setup experience.</p>"},{"location":"SETUP/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js 18.0 or higher (download)</li> <li>npm 9.0 or higher (comes with Node.js)</li> <li>Git (download)</li> <li>A Firebase account (free tier is sufficient)</li> <li>A Vercel account (optional, for deployment)</li> </ul> <p>Check your versions: <pre><code>node --version  # Should be v18.0.0 or higher\nnpm --version   # Should be 9.0.0 or higher\ngit --version   # Any recent version\n</code></pre></p>"},{"location":"SETUP/#local-development-setup","title":"Local Development Setup","text":""},{"location":"SETUP/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/hopekali04/worktrack.git\ncd worktrack\n</code></pre>"},{"location":"SETUP/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install\n</code></pre> <p>This will install all required dependencies listed in <code>package.json</code>, including: - Next.js, React, TypeScript - Firebase SDK - Tailwind CSS - Form libraries (React Hook Form, Zod) - UI libraries (Headless UI, Heroicons) - And more...</p>"},{"location":"SETUP/#3-firebase-project-setup","title":"3. Firebase Project Setup","text":""},{"location":"SETUP/#create-a-firebase-project","title":"Create a Firebase Project","text":"<ol> <li>Go to Firebase Console</li> <li>Click \"Add project\"</li> <li>Enter project name (e.g., \"worktrack-dev\")</li> <li>Disable Google Analytics (optional for development)</li> <li>Click \"Create project\"</li> </ol>"},{"location":"SETUP/#enable-authentication","title":"Enable Authentication","text":"<ol> <li>In Firebase Console, go to Build \u2192 Authentication</li> <li>Click \"Get started\"</li> <li>Enable Email/Password provider:</li> <li>Click on \"Email/Password\"</li> <li>Toggle \"Enable\"</li> <li>Click \"Save\"</li> <li>Enable Google provider:</li> <li>Click on \"Google\"</li> <li>Toggle \"Enable\"</li> <li>Enter support email</li> <li>Click \"Save\"</li> </ol>"},{"location":"SETUP/#create-firestore-database","title":"Create Firestore Database","text":"<ol> <li>Go to Build \u2192 Firestore Database</li> <li>Click \"Create database\"</li> <li>Choose \"Start in test mode\" (we'll add security rules later)</li> <li>Select a location close to your users</li> <li>Click \"Enable\"</li> </ol>"},{"location":"SETUP/#create-storage-bucket-optional","title":"Create Storage Bucket (Optional)","text":"<ol> <li>Go to Build \u2192 Storage</li> <li>Click \"Get started\"</li> <li>Start in test mode</li> <li>Use default location</li> <li>Click \"Done\"</li> </ol>"},{"location":"SETUP/#get-firebase-configuration","title":"Get Firebase Configuration","text":"<ol> <li>Go to Project Settings (gear icon)</li> <li>Scroll down to \"Your apps\"</li> <li>Click the web icon (<code>&amp;lt;/&amp;gt;</code>) to add a web app</li> <li>Enter app nickname (e.g., \"WorkTrack Web\")</li> <li>Don't check \"Firebase Hosting\" (we'll use Vercel)</li> <li>Click \"Register app\"</li> <li>Copy the configuration object - you'll need these values:</li> </ol> <pre><code>const firebaseConfig = {\n  apiKey: \"AIza...\",\n  authDomain: \"your-project.firebaseapp.com\",\n  projectId: \"your-project-id\",\n  storageBucket: \"your-project.appspot.com\",\n  messagingSenderId: \"123456789\",\n  appId: \"1:123:web:abc123\",\n  measurementId: \"G-ABC123\" // Optional\n};\n</code></pre>"},{"location":"SETUP/#4-configure-environment-variables","title":"4. Configure Environment Variables","text":"<p>Create a <code>.env.local</code> file in the root directory:</p> <pre><code>cp .env.example .env.local\n</code></pre> <p>Edit <code>.env.local</code> and add your Firebase configuration:</p> <pre><code># Firebase Configuration\nNEXT_PUBLIC_FIREBASE_API_KEY=your_api_key_here\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your-project-id.firebaseapp.com\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=your-project-id\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your-project-id.appspot.com\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nNEXT_PUBLIC_FIREBASE_APP_ID=your_app_id\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=your_measurement_id\n</code></pre> <p>Important Notes: - All variables start with <code>NEXT_PUBLIC_</code> because they're used in the browser - Do NOT commit <code>.env.local</code> to Git (it's in <code>.gitignore</code>) - Firebase API keys are safe to expose publicly (they're restricted by domain and security rules)</p>"},{"location":"SETUP/#5-deploy-firebase-security-rules","title":"5. Deploy Firebase Security Rules","text":"<p>Install Firebase CLI globally:</p> <pre><code>npm install -g firebase-tools\n</code></pre> <p>Login to Firebase:</p> <pre><code>firebase login\n</code></pre> <p>Initialize Firebase in your project:</p> <pre><code>firebase init\n</code></pre> <p>Select the following options: - Which features? \u2192 Firestore, Storage (use spacebar to select) - Select a default Firebase project \u2192 Choose your project - Firestore rules file \u2192 <code>firestore.rules</code> (default) - Firestore indexes file \u2192 <code>firebase/firestore.indexes.json</code> - Storage rules file \u2192 <code>storage.rules</code> (default)</p> <p>Deploy the security rules:</p> <pre><code>firebase deploy --only firestore:rules,storage:rules\n</code></pre>"},{"location":"SETUP/#6-run-the-development-server","title":"6. Run the Development Server","text":"<p>Start the development server:</p> <pre><code>npm run dev\n</code></pre> <p>Open http://localhost:3000 in your browser.</p> <p>You should see the login page. If you see any errors: - Check the browser console for error messages - Verify your <code>.env.local</code> file has correct values - Ensure Firebase services are enabled in the console</p>"},{"location":"SETUP/#7-test-the-application","title":"7. Test the Application","text":"<ol> <li>Sign up for an account:</li> <li>Click \"Sign up\" </li> <li>Enter email and password</li> <li> <p>Submit the form</p> </li> <li> <p>Verify authentication:</p> </li> <li>Check that you're redirected to the dashboard</li> <li> <p>Check Firebase Console \u2192 Authentication \u2192 Users to see your account</p> </li> <li> <p>Test workout type creation:</p> </li> <li>Go to \"My Workouts\"</li> <li>Click \"Load Default Workouts\" or \"Add Workout\"</li> <li> <p>Verify data appears in Firebase Console \u2192 Firestore Database</p> </li> <li> <p>Log a workout:</p> </li> <li>Click \"Log Workout\"</li> <li>Fill in the form</li> <li>Verify the session appears in the dashboard</li> </ol>"},{"location":"SETUP/#firebase-security-rules-explained","title":"Firebase Security Rules Explained","text":""},{"location":"SETUP/#firestore-rules-firestorerules","title":"Firestore Rules (<code>firestore.rules</code>)","text":"<pre><code>rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users can read and write their own profile\n    match /users/{userId} {\n      allow read, write: if request.auth != null &amp;&amp; request.auth.uid == userId;\n    }\n\n    // Users can read and write their own workout types\n    match /workoutTypes/{typeId} {\n      allow read, write: if request.auth != null &amp;&amp; request.auth.uid == resource.data.userId;\n      allow create: if request.auth != null &amp;&amp; request.auth.uid == request.resource.data.userId;\n    }\n\n    // Users can read and write their own workout sessions\n    match /workoutSessions/{sessionId} {\n      allow read, write: if request.auth != null &amp;&amp; request.auth.uid == resource.data.userId;\n      allow create: if request.auth != null &amp;&amp; request.auth.uid == request.resource.data.userId;\n    }\n  }\n}\n</code></pre> <p>Key Points: - Users must be authenticated (<code>request.auth != null</code>) - Users can only access documents where <code>userId</code> matches their <code>uid</code> - On create, the <code>userId</code> field must match the authenticated user - This ensures complete data isolation between users</p>"},{"location":"SETUP/#storage-rules-future","title":"Storage Rules (Future)","text":"<p>For user uploads like profile pictures:</p> <pre><code>rules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /users/{userId}/{allPaths=**} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null &amp;&amp; request.auth.uid == userId;\n    }\n  }\n}\n</code></pre>"},{"location":"SETUP/#development-workflow","title":"Development Workflow","text":""},{"location":"SETUP/#starting-development","title":"Starting Development","text":"<pre><code># Start dev server with Turbopack (faster)\nnpm run dev\n\n# Or with legacy Webpack\nnpm run dev -- --no-turbopack\n</code></pre>"},{"location":"SETUP/#code-quality","title":"Code Quality","text":"<pre><code># Run ESLint\nnpm run lint\n\n# Type checking\nnpx tsc --noEmit\n</code></pre>"},{"location":"SETUP/#building-for-production","title":"Building for Production","text":"<pre><code># Create production build\nnpm run build\n\n# Test production build locally\nnpm run start\n</code></pre>"},{"location":"SETUP/#common-development-tasks","title":"Common Development Tasks","text":"<p>Clear Next.js cache: <pre><code>rm -rf .next\nnpm run dev\n</code></pre></p> <p>Update dependencies: <pre><code>npm update\nnpm outdated  # Check for newer versions\n</code></pre></p> <p>Add new dependency: <pre><code>npm install package-name\nnpm install -D package-name  # For dev dependencies\n</code></pre></p>"},{"location":"SETUP/#production-deployment","title":"Production Deployment","text":""},{"location":"SETUP/#deploy-to-vercel-recommended","title":"Deploy to Vercel (Recommended)","text":"<p>Vercel is the easiest way to deploy Next.js applications.</p>"},{"location":"SETUP/#option-1-deploy-via-vercel-dashboard","title":"Option 1: Deploy via Vercel Dashboard","text":"<ol> <li> <p>Push code to GitHub:    <pre><code>git add .\ngit commit -m \"Initial commit\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Import to Vercel:</p> </li> <li>Go to vercel.com</li> <li>Click \"Add New Project\"</li> <li>Import your GitHub repository</li> <li> <p>Vercel auto-detects Next.js configuration</p> </li> <li> <p>Add environment variables:</p> </li> <li>In project settings \u2192 Environment Variables</li> <li>Add all variables from <code>.env.local</code></li> <li> <p>Apply to Production, Preview, and Development</p> </li> <li> <p>Deploy:</p> </li> <li>Click \"Deploy\"</li> <li>Wait for build to complete (~2-3 minutes)</li> <li>Access your app at <code>your-app.vercel.app</code></li> </ol>"},{"location":"SETUP/#option-2-deploy-via-vercel-cli","title":"Option 2: Deploy via Vercel CLI","text":"<ol> <li> <p>Install Vercel CLI:    <pre><code>npm install -g vercel\n</code></pre></p> </li> <li> <p>Login:    <pre><code>vercel login\n</code></pre></p> </li> <li> <p>Deploy:    <pre><code>vercel --prod\n</code></pre></p> </li> <li> <p>Follow prompts:</p> </li> <li>Link to existing project or create new</li> <li>Set environment variables when prompted</li> </ol>"},{"location":"SETUP/#post-deployment-configuration","title":"Post-Deployment Configuration","text":""},{"location":"SETUP/#update-firebase-authorized-domains","title":"Update Firebase Authorized Domains","text":"<ol> <li>Go to Firebase Console \u2192 Authentication \u2192 Settings</li> <li>Scroll to Authorized domains</li> <li>Click \"Add domain\"</li> <li>Add your Vercel domain (e.g., <code>your-app.vercel.app</code>)</li> <li>Click \"Add\"</li> </ol> <p>Without this, Google Sign-In won't work on your deployed app.</p>"},{"location":"SETUP/#test-production-deployment","title":"Test Production Deployment","text":"<ol> <li>Test authentication:</li> <li>Sign up with a new account</li> <li>Try Google Sign-In</li> <li> <p>Verify you can log in</p> </li> <li> <p>Test data operations:</p> </li> <li>Create workout types</li> <li>Log workout sessions</li> <li> <p>View progress charts</p> </li> <li> <p>Test on multiple devices:</p> </li> <li>Mobile phone</li> <li>Tablet</li> <li>Desktop browsers (Chrome, Firefox, Safari)</li> </ol>"},{"location":"SETUP/#deploy-to-firebase-hosting-alternative","title":"Deploy to Firebase Hosting (Alternative)","text":"<p>If you prefer Firebase Hosting over Vercel:</p> <ol> <li> <p>Build the app:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Initialize Firebase Hosting:    <pre><code>firebase init hosting\n</code></pre></p> </li> </ol> <p>Select:    - Public directory: <code>out</code>    - Configure as SPA: <code>Yes</code>    - Overwrite index.html: <code>No</code></p> <ol> <li>Export static site (requires Next.js config changes):</li> </ol> <p>Edit <code>next.config.ts</code>:    <pre><code>const nextConfig = {\n  output: 'export',\n};\n</code></pre></p> <ol> <li>Build and deploy:    <pre><code>npm run build\nfirebase deploy --only hosting\n</code></pre></li> </ol> <p>Note: Firebase Hosting requires static export, which disables some Next.js features. Vercel is recommended for full feature support.</p>"},{"location":"SETUP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"SETUP/#firebase-configuration-issues","title":"Firebase Configuration Issues","text":"<p>Error: <code>Firebase: Error (auth/invalid-api-key)</code></p> <p>Solution:  - Check that <code>NEXT_PUBLIC_FIREBASE_API_KEY</code> in <code>.env.local</code> is correct - Verify you copied the exact value from Firebase Console - Restart dev server after changing <code>.env.local</code></p>"},{"location":"SETUP/#authentication-issues","title":"Authentication Issues","text":"<p>Error: <code>auth/unauthorized-domain</code></p> <p>Solution: - Go to Firebase Console \u2192 Authentication \u2192 Settings \u2192 Authorized domains - Add <code>localhost</code> for local development - Add your Vercel domain for production</p> <p>Error: Google Sign-In button doesn't appear</p> <p>Solution: - Verify Google provider is enabled in Firebase Console - Check browser console for errors - Ensure you entered a support email in Google provider settings</p>"},{"location":"SETUP/#firestore-permission-issues","title":"Firestore Permission Issues","text":"<p>Error: <code>FirebaseError: Missing or insufficient permissions</code></p> <p>Solution: - Deploy Firestore rules: <code>firebase deploy --only firestore:rules</code> - Verify user is authenticated before accessing data - Check that <code>userId</code> field matches authenticated user's UID</p>"},{"location":"SETUP/#build-errors","title":"Build Errors","text":"<p>Error: Type errors during build</p> <p>Solution: <pre><code># Check for type errors\nnpx tsc --noEmit\n\n# Fix errors in code\n# Then rebuild\nnpm run build\n</code></pre></p> <p>Error: <code>ENOENT: no such file or directory</code></p> <p>Solution: <pre><code># Clear cache and reinstall\nrm -rf .next node_modules\nnpm install\nnpm run build\n</code></pre></p>"},{"location":"SETUP/#port-already-in-use","title":"Port Already in Use","text":"<p>Error: <code>Port 3000 is already in use</code></p> <p>Solution: <pre><code># Find process using port 3000\nlsof -ti:3000\n\n# Kill the process (macOS/Linux)\nkill -9 $(lsof -ti:3000)\n\n# Or use a different port\nnpm run dev -- -p 3001\n</code></pre></p>"},{"location":"SETUP/#environment-variables-not-loading","title":"Environment Variables Not Loading","text":"<p>Solution: - Ensure file is named exactly <code>.env.local</code> (not <code>.env</code> or <code>.env.development</code>) - All variables for browser must start with <code>NEXT_PUBLIC_</code> - Restart dev server after changing environment variables - For Vercel, ensure variables are set in dashboard</p>"},{"location":"SETUP/#database-maintenance","title":"Database Maintenance","text":""},{"location":"SETUP/#backup-firestore-data","title":"Backup Firestore Data","text":"<p>Use Firebase CLI to export data:</p> <pre><code># Export entire database\nfirebase firestore:export gs://your-bucket-name/backups/$(date +%Y%m%d)\n\n# Export specific collection\nfirebase firestore:export --collection-ids=workoutSessions gs://your-bucket-name/backups\n</code></pre>"},{"location":"SETUP/#restore-firestore-data","title":"Restore Firestore Data","text":"<pre><code>firebase firestore:import gs://your-bucket-name/backups/20240101\n</code></pre>"},{"location":"SETUP/#monitor-usage","title":"Monitor Usage","text":"<p>Check Firebase Console \u2192 Usage and billing to monitor: - Firestore reads/writes - Authentication sign-ins - Storage usage - Function invocations (if using Cloud Functions)</p> <p>Free tier limits: - Firestore: 50K reads, 20K writes, 20K deletes per day - Authentication: Unlimited - Storage: 5GB storage, 1GB/day downloads</p>"},{"location":"SETUP/#cicd-setup-optional","title":"CI/CD Setup (Optional)","text":""},{"location":"SETUP/#github-actions-for-vercel","title":"GitHub Actions for Vercel","text":"<p>Create <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy to Vercel\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run linter\n        run: npm run lint\n\n      - name: Type check\n        run: npx tsc --noEmit\n\n      - name: Build\n        run: npm run build\n        env:\n          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}\n          # ... other environment variables\n</code></pre>"},{"location":"SETUP/#firebase-hosting-with-github-actions","title":"Firebase Hosting with GitHub Actions","text":"<pre><code>name: Deploy to Firebase Hosting\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy to Firebase\n        uses: FirebaseExtended/action-hosting-deploy@v0\n        with:\n          repoToken: '${{ secrets.GITHUB_TOKEN }}'\n          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'\n          channelId: live\n</code></pre>"},{"location":"SETUP/#performance-optimization","title":"Performance Optimization","text":""},{"location":"SETUP/#analyze-bundle-size","title":"Analyze Bundle Size","text":"<pre><code># Install bundle analyzer\nnpm install -D @next/bundle-analyzer\n\n# Add to next.config.ts\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n});\n\nmodule.exports = withBundleAnalyzer(nextConfig);\n\n# Run analysis\nANALYZE=true npm run build\n</code></pre>"},{"location":"SETUP/#lighthouse-testing","title":"Lighthouse Testing","text":"<pre><code># Install Lighthouse\nnpm install -g lighthouse\n\n# Run Lighthouse on local build\nnpm run build\nnpm run start\nlighthouse http://localhost:3000 --view\n</code></pre> <p>Target scores: - Performance: 90+ - Accessibility: 95+ - Best Practices: 95+ - SEO: 90+</p>"},{"location":"SETUP/#next-steps","title":"Next Steps","text":"<p>After completing setup:</p> <ol> <li>Read Architecture.md to understand system design</li> <li>Review API.md for data models and hooks</li> <li>Explore ideas.md for feature ideas</li> <li>Start building!</li> </ol>"},{"location":"SETUP/#getting-help","title":"Getting Help","text":"<ul> <li>Firebase Documentation: https://firebase.google.com/docs</li> <li>Next.js Documentation: https://nextjs.org/docs</li> <li>Tailwind CSS: https://tailwindcss.com/docs</li> <li>GitHub Issues: Report bugs or request features</li> </ul> <p>Happy coding! </p>"},{"location":"ideas/","title":"\ud83c\udf81 Optional Features &amp; Enhancements","text":"<p>This document outlines additional features that can be added to the Workout Tracker application, with complexity estimates and implementation priority.</p>"},{"location":"ideas/#high-priority-quick-wins","title":"\ud83d\udd25 High Priority (Quick Wins)","text":""},{"location":"ideas/#1-csv-exportimport","title":"1. CSV Export/Import","text":"<p>Complexity: Low (4-6 hours) Priority: High</p> <p>Export workout data to CSV for backup or analysis in Excel/Google Sheets.</p> <p>Implementation: - Add export button in Settings or Progress page - Use <code>papaparse</code> to generate CSV from Firestore data - Add import functionality to restore data from CSV</p> <pre><code>// Example export function\nimport Papa from 'papaparse';\n\nfunction exportWorkoutsToCSV(sessions: WorkoutSession[]) {\n  const data = sessions.map(session =&gt; ({\n    date: new Date(session.date.seconds * 1000).toISOString(),\n    duration: session.duration,\n    exercises: session.exercises.map(e =&gt; e.workoutTypeName).join(', '),\n    totalVolume: calculateTotalVolume(session),\n    notes: session.notes || '',\n  }));\n\n  const csv = Papa.unparse(data);\n  const blob = new Blob([csv], { type: 'text/csv' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = `workout-data-${Date.now()}.csv`;\n  link.click();\n}\n</code></pre>"},{"location":"ideas/#2-workout-templates","title":"2. Workout Templates","text":"<p>Complexity: Medium (8-12 hours) Priority: High</p> <p>Save common workout routines as templates for quick logging.</p> <p>Features: - Create workout templates with predefined exercises and sets - Quick-start a workout from a template - Edit and manage templates</p> <p>Database Schema: <pre><code>interface WorkoutTemplate {\n  id: string;\n  userId: string;\n  name: string;\n  description?: string;\n  exercises: {\n    workoutTypeId: string;\n    defaultSets: number;\n    defaultReps: number;\n    defaultWeight?: number;\n  }[];\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n</code></pre></p>"},{"location":"ideas/#3-rest-timer","title":"3. Rest Timer","text":"<p>Complexity: Low (3-4 hours) Priority: High</p> <p>Countdown timer between sets using the user's default rest time.</p> <p>Features: - Visual countdown with progress ring - Sound/vibration notification when time is up - Pause/resume/skip functionality - Adjustable on-the-fly</p>"},{"location":"ideas/#4-personal-records-auto-detection","title":"4. Personal Records Auto-Detection","text":"<p>Complexity: Medium (6-8 hours) Priority: High</p> <p>Automatically detect and celebrate new personal bests.</p> <p>Features: - Calculate PRs after each workout - Show badge/notification for new PRs - PR history timeline - Comparison with previous best</p>"},{"location":"ideas/#medium-priority-value-add-features","title":"\ud83c\udfaf Medium Priority (Value-Add Features)","text":""},{"location":"ideas/#5-exercise-videoimage-library","title":"5. Exercise Video/Image Library","text":"<p>Complexity: High (16-20 hours) Priority: Medium</p> <p>Add demonstration videos or images for proper form.</p> <p>Features: - Upload custom exercise images/videos to Firebase Storage - Link to YouTube videos for demonstrations - Show preview when logging workouts</p>"},{"location":"ideas/#6-social-features-workout-sharing","title":"6. Social Features (Workout Sharing)","text":"<p>Complexity: High (20-30 hours) Priority: Medium</p> <p>Share workouts with friends or the community.</p> <p>Features: - Generate shareable workout links - Public workout feed (optional) - Follow friends and see their progress - Like/comment on workouts</p> <p>Privacy Considerations: - Opt-in only - Granular privacy controls - Anonymous sharing option</p>"},{"location":"ideas/#7-progressive-overload-recommendations","title":"7. Progressive Overload Recommendations","text":"<p>Complexity: High (15-20 hours) Priority: Medium</p> <p>AI-powered suggestions for weight/rep progressions.</p> <p>Features: - Analyze historical data to suggest next weight - Progressive overload calculator - Deload week detection and recommendations - Volume accumulation tracking</p>"},{"location":"ideas/#8-body-measurements-tracking","title":"8. Body Measurements Tracking","text":"<p>Complexity: Medium (8-10 hours) Priority: Medium</p> <p>Track weight, body fat %, measurements over time.</p> <p>Features: - Log body weight, measurements (chest, arms, waist, etc.) - Photo progress tracking (before/after) - Charts showing body composition changes - Integration with progress graphs</p> <p>Database Schema: <pre><code>interface BodyMeasurement {\n  id: string;\n  userId: string;\n  date: Timestamp;\n  weight?: number;\n  bodyFat?: number;\n  measurements?: {\n    chest?: number;\n    waist?: number;\n    hips?: number;\n    arms?: number;\n    thighs?: number;\n  };\n  photoUrl?: string;\n  notes?: string;\n}\n</code></pre></p>"},{"location":"ideas/#9-workout-notes-with-voice-recording","title":"9. Workout Notes with Voice Recording","text":"<p>Complexity: Medium (10-12 hours) Priority: Medium</p> <p>Record voice notes during/after workouts.</p> <p>Features: - Voice-to-text transcription - Audio playback for post-workout review - Tag specific exercises with notes</p>"},{"location":"ideas/#advanced-features-long-term","title":"\ud83d\ude80 Advanced Features (Long-term)","text":""},{"location":"ideas/#10-pwa-with-offline-support","title":"10. PWA with Offline Support","text":"<p>Complexity: High (20-25 hours) Priority: Medium</p> <p>Make the app work offline and installable.</p> <p>Features: - Service worker for offline functionality - Local storage sync with Firestore - Install prompt for mobile devices - Push notifications for workout reminders</p> <p>Implementation Steps: 1. Add <code>next-pwa</code> plugin 2. Configure service worker 3. Add manifest.json for PWA 4. Implement offline queue for Firestore writes 5. Add sync logic when connection restored</p>"},{"location":"ideas/#11-workout-programs-periodization","title":"11. Workout Programs &amp; Periodization","text":"<p>Complexity: Very High (30-40 hours) Priority: Low</p> <p>Structured workout programs with periodization.</p> <p>Features: - Pre-built programs (5x5, PPL, Upper/Lower) - Custom program builder - Week-by-week progression tracking - Deload weeks and recovery phases - Program completion tracking</p>"},{"location":"ideas/#12-nutrition-tracking-integration","title":"12. Nutrition Tracking Integration","text":"<p>Complexity: Very High (40-50 hours) Priority: Low</p> <p>Track macros and calories alongside workouts.</p> <p>Features: - Food diary with macro tracking - Meal planning - Integration with MyFitnessPal API - Macro goals and recommendations - Correlation between nutrition and performance</p>"},{"location":"ideas/#13-workout-buddy-gym-partner-matching","title":"13. Workout Buddy / Gym Partner Matching","text":"<p>Complexity: Very High (50+ hours) Priority: Low</p> <p>Find workout partners with similar goals.</p> <p>Features: - Profile with fitness goals and preferences - Location-based gym partner search - Schedule coordination - Shared workouts and challenges</p>"},{"location":"ideas/#14-coaching-features","title":"14. Coaching Features","text":"<p>Complexity: Very High (60+ hours) Priority: Low</p> <p>Allow trainers to coach clients.</p> <p>Features: - Coach/client relationship management - Assign workout programs to clients - Track client progress as a coach - In-app messaging - Payment integration for coaching services</p>"},{"location":"ideas/#15-wearable-integration","title":"15. Wearable Integration","text":"<p>Complexity: Very High (40-50 hours) Priority: Low</p> <p>Sync with fitness wearables (Apple Watch, Fitbit, Garmin).</p> <p>Features: - Import heart rate data - Auto-detect workouts from wearables - Export workouts to Apple Health / Google Fit - Real-time heart rate monitoring during workouts</p> <p>APIs: - Apple HealthKit - Google Fit - Fitbit API - Garmin Connect API</p>"},{"location":"ideas/#technical-improvements","title":"\ud83d\udee0\ufe0f Technical Improvements","text":""},{"location":"ideas/#16-advanced-analytics-dashboard","title":"16. Advanced Analytics Dashboard","text":"<p>Complexity: Medium (12-15 hours) Priority: Medium</p> <p>More detailed insights and statistics.</p> <p>Features: - Heat map of workout frequency - Volume trends by muscle group - Training split analysis (Push/Pull/Legs ratio) - Recovery time analysis - Weekly/monthly summary emails</p>"},{"location":"ideas/#17-mobile-app-react-native","title":"17. Mobile App (React Native)","text":"<p>Complexity: Very High (80-100 hours) Priority: Low</p> <p>Native mobile app for iOS and Android.</p> <p>Benefits: - Better performance on mobile - Native features (camera, notifications) - Offline-first architecture - App store presence</p>"},{"location":"ideas/#18-rate-limiting-analytics","title":"18. Rate Limiting &amp; Analytics","text":"<p>Complexity: Medium (8-10 hours) Priority: Medium</p> <p>Prevent abuse and track usage.</p> <p>Features: - Firebase App Check for bot protection - Rate limiting on API endpoints - Google Analytics or Mixpanel integration - User behavior tracking for improvements</p>"},{"location":"ideas/#19-internationalization-i18n","title":"19. Internationalization (i18n)","text":"<p>Complexity: Medium (10-15 hours) Priority: Low</p> <p>Support multiple languages.</p> <p>Features: - English, Spanish, French, German, etc. - Currency and unit system auto-detection - RTL support for Arabic/Hebrew</p>"},{"location":"ideas/#20-backup-data-export","title":"20. Backup &amp; Data Export","text":"<p>Complexity: Low (4-6 hours) Priority: High</p> <p>Automated backups to prevent data loss.</p> <p>Features: - Scheduled automatic backups - Export all data as JSON - One-click restore from backup - Cloud backup to Google Drive/Dropbox</p>"},{"location":"ideas/#priority-matrix","title":"\ud83d\udcca Priority Matrix","text":"Feature Complexity Value Priority Estimated Hours CSV Export/Import Low High P0 4-6 Rest Timer Low High P0 3-4 PR Auto-Detection Medium High P1 6-8 Workout Templates Medium High P1 8-12 Body Measurements Medium Medium P2 8-10 Exercise Media High Medium P2 16-20 PWA/Offline High Medium P2 20-25 Workout Programs Very High Medium P3 30-40 Social Features Very High Low P3 50+"},{"location":"ideas/#recommended-implementation-order","title":"\ud83c\udfaf Recommended Implementation Order","text":"<ol> <li>Phase 1 (Quick wins - 2 weeks):</li> <li>CSV Export/Import</li> <li>Rest Timer</li> <li>PR Auto-Detection</li> <li> <p>Backup &amp; Data Export</p> </li> <li> <p>Phase 2 (Core enhancements - 4 weeks):</p> </li> <li>Workout Templates</li> <li>Body Measurements</li> <li>Advanced Analytics Dashboard</li> <li> <p>Rate Limiting &amp; Analytics</p> </li> <li> <p>Phase 3 (Advanced features - 8+ weeks):</p> </li> <li>Exercise Video Library</li> <li>PWA with Offline Support</li> <li>Workout Programs</li> <li>Progressive Overload AI</li> </ol> <p>Choose features based on your users' needs and feedback!</p>"}]}